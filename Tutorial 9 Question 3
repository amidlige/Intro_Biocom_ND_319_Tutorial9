#Import Packages
import pandas
import numpy
from scipy.optimize import minimize
from scipy.stats import norm
import re
import os
from plotnine import *

os.chdir("/Users/madelinebuynak/Desktop")

#load data
data=pandas.read_csv("leafDecomp.csv",header=0,sep='\t')

subset=data.loc[data.mutation.isin(['WT','I231N']),:]


#plot data
plot = ggplot(data, aes(y = 'Ms', x = 'decomp'))
plot + geom_jitter(colour='black')

#quadratic

#define 3 custom likelihood functions
def nllike(p,obs):
    B0=p(0)
    B1=p(1)
    sigma=p(2)

def null (p,obs):
    B0=p[0]
    sigma=p[1]
    
    expected=B0
    nll=-1*norm(expected,sigma).logpdf(obs.y).sum()
    return nll

def alter (p,obs):
    B0=p[0]
    B1=p[1]
    sigma=p[2]
    
    expected=B0+B1*obs.x
    nll=-1*norm(expected,sigma).logpdf(obs.y).sum()
    return nll

def alter (p,obs):
    B0=p[0]
    B1=p[1]
    sigma=p[3]
    
    expected=B0+B1*obs.x+B2*obs.x^2
    nll=-1*norm(expected,sigma).logpdf(obs.y).sum()
    return nll
    
#Estimate the Parameters
#Initial Guess for Model 1 (mean~590)
#Initial Guess for Model 2 (intercept~200 slope~6.33)

initialGuess=numpy.array([1,1,1])
fitNull=minimize(nllike,initialGuess,method="Nelder-Mead",options={'disp':True},args=subset)
fitAlter=minimize(nllike,initialGuess,method="Nelder-Mead",options={'disp':True},args=subset)

#Compare Models
#likelihood test
D=2*(fitNull.fun-fitAlter.fun)
1-ch2.cdf(x=D,df=1)


#quadratic model is the best fit, but linear model is better than constant model


